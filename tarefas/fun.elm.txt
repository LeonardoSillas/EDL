import Html exposing (text)

type alias Aluno = (String, Float, Float) -- Aluno é um tipo tupla com o nome e as duas notas
type alias Turma = List Aluno             -- Turma é um tipo lista de alunos

media: Aluno -> Float
media (_,n1,n2) = (n1+n2)/2     -- o nome é ignorado

notap2: Aluno -> Float
notap2 (_,_,a) = a 

nome: Aluno -> String
nome (nm,_,_) = nm-- as notas são ignoradas

turma: Turma
turma = [ ("Joao",10,4), ("Maria",11,6),("Leonardo",7,2),("Francisco",10,5) ]       -- 50 alunos

--LISTA COM AS MÉDIAS DOS ALUNOS DE "turma"
medias: List Float
medias = List.map media turma
--LISTA COM OS NOMES DOS ALUNOS DE "turma" APROVADOS
aprovados: List String
aprovados = List.map  nome (List.filter (\a -> (media a) >= 7 ) turma)
--MÉDIA FINAL DOS ALUNOS DE "turma" (média de todas as médias)
acumulamedia: Aluno -> Float -> Float
acumulamedia aluno soma = (media aluno) + soma

mediatotal: List Aluno -> Float
mediatotal aluno = (List.foldl acumulamedia 0 aluno) / (toFloat (List.length aluno))

total: Float
total = mediatotal turma
--LISTA DE ALUNOS QUE GABARITARAM A P1
os10: Aluno -> Bool
os10 (_,a,_) = a == 10

gabaritop1: Turma
gabaritop1 = List.filter os10 turma

sónome10: List String
sónome10 = List.map nome gabaritop1
-- LISTA COM OS NOMES E MEDIAS DOS ALUNOS APROVADOS 
apro: Aluno -> Bool
apro a = media a >= 7

listaaprovados: Turma
listaaprovados = List.filter apro turma
--LISTA COM TODAS AS NOTAS DE TODAS AS PROVAS
sonotas: Aluno -> String
sonotas (_,a,b) = toString(a) ++"," ++ toString(b)  

todasnotas: List String
todasnotas = List.map sonotas turma

main = text (toString medias)
